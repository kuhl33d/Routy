import { useState, useEffect, useMemo } from "react";
import { Plus, Edit2, Search, Eye } from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { useAdminStore } from "@/stores/admin.store";
import { toast } from "react-hot-toast";
import { Parent } from "@/types/admin.types";
import LoadingSpinner from "@/components/LoadingSpinner";

export default function ParentsTab() {
  // State management
  const [searchTerm, setSearchTerm] = useState("");
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [selectedParent, setSelectedParent] = useState<Parent | null>(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [isEditOpen, setIsEditOpen] = useState(false);

  // Get store actions and state
  const { parents, loading, error, getAllParents, updateParent } = useAdminStore();

  // Fetch parents on mount
  useEffect(() => {
    fetchParents();
  }, []);

  const fetchParents = async () => {
    try {
      await getAllParents();
    } catch (error: unknown) {
      if (error instanceof Error)
        toast.error(error.message || "Failed to fetch parents");
    }
  };

  // Filter parents based on search term
  const filteredParents = useMemo(() => {
    if (!Array.isArray(parents)) {
      console.warn("Parents is not an array:", parents);
      return [];
    }
    return parents.filter(
      (parent) =>
        parent.userId?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        parent.userId?.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (parent.address || "").toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [parents, searchTerm]);

  // Status update handler
  const handleStatusUpdate = async (
    parentId: string,
    newStatus: "active" | "inactive" | "suspended"
  ) => {
    try {
      await updateParent({
        parentId,
        updateData: { status: newStatus },
      });
      toast.success(
        `Parent ${newStatus === "active" ? "activated" : "suspended"} successfully`
      );
      fetchParents();
    } catch (error: unknown) {
      if (error instanceof Error)
        toast.error(error.message || `Failed to update parent status`);
    }
  };

  // Create parent handler
  const handleCreateParent = async (formData: FormData) => {
    try {
      const parentData: Partial<Parent> = {
        userId: {
          _id: "", // This will be generated by the backend
          name: formData.get("name") as string,
          email: formData.get("email") as string,
          phoneNumber: [formData.get("phoneNumber") as string],
        },
        address: formData.get("address") as string,
        status: "inactive" as const,
      };

      await updateParent({
        parentId: "", // New parent, no ID yet
        updateData: parentData,
      });
      setIsCreateModalOpen(false);
      toast.success("Parent created successfully");
      fetchParents();
    } catch (error: unknown) {
      if (error instanceof Error)
        toast.error(error.message || "Failed to create parent");
    }
  };

  // Parent Form Component
  const ParentForm = ({
    onSubmit,
    initialData,
  }: {
    onSubmit: (formData: FormData) => Promise<void>;
    initialData?: Parent | null;
  }) => {
    return (
      <form
        onSubmit={(e) => {
          e.preventDefault();
          onSubmit(new FormData(e.currentTarget));
        }}
        className="space-y-4"
      >
        <div className="space-y-2">
          <label className="text-sm font-medium">Parent Name</label>
          <Input
            name="name"
            defaultValue={initialData?.userId?.name}
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Email</label>
          <Input
            name="email"
            type="email"
            defaultValue={initialData?.userId?.email}
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Phone Number</label>
          <Input
            name="phoneNumber"
            type="tel"
            defaultValue={initialData?.userId?.phoneNumber?.[0]}
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Address</label>
          <Input name="address" defaultValue={initialData?.address} required />
        </div>
        <Button type="submit" className="w-full">
          {initialData ? "Update Parent" : "Create Parent"}
        </Button>
      </form>
    );
  };

  // Status Badge Component
  const StatusBadge = ({ status }: { status: string }) => (
    <Badge
      className={
        status === "active"
          ? "bg-green-100 text-green-800"
          : status === "suspended"
          ? "bg-red-100 text-red-800"
          : "bg-gray-100 text-gray-800"
      }
    >
      {status}
    </Badge>
  );

  // Parent Details Dialog
  const ParentDetailsDialog = ({ parent }: { parent: Parent }) => {
    return (
      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{parent.userId?.name || "Parent Details"}</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <h3 className="font-medium">Contact Information</h3>
              <p>Email: {parent.userId?.email}</p>
              <p>Phone: {parent.userId?.phoneNumber?.[0] || "Not provided"}</p>
            </div>
            <div>
              <h3 className="font-medium">Address</h3>
              <p>{parent.address || "Not provided"}</p>
            </div>
            <div>
              <h3 className="font-medium">Status</h3>
              <StatusBadge status={parent.status || "inactive"} />
            </div>
            <div>
              <h3 className="font-medium">Students</h3>
              <p>{parent.students?.length || 0} students registered</p>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    );
  };

  if (error) {
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-md">
        <p className="text-red-600">{error}</p>
        <Button
          onClick={fetchParents}
          className="mt-4 bg-red-600 hover:bg-red-700 text-white"
        >
          Retry
        </Button>
      </div>
    );
  }

  return (
    <div>
      {/* Header with Add button and search */}
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Parents</h2>
        <div className="flex items-center gap-4">
          <Input
            placeholder="Search parents..."
            className="max-w-xs bg-background"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
            <DialogTrigger asChild>
              <Button className="bg-[#F7B32B] text-black hover:bg-[#F7B32B]/90 flex items-center">
                <Plus className="mr-2 h-4 w-4" />
                Add Parent
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Add New Parent</DialogTitle>
              </DialogHeader>
              <ParentForm onSubmit={handleCreateParent} />
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Loading state */}
      {loading ? (
        <LoadingSpinner />
      ) : /* Empty state */
      parents.length === 0 ? (
        <div className="text-center py-16">
          <p className="mb-4 text-lg text-muted-foreground">
            No parents found. Click below to add your first parent.
          </p>
          <Button
            onClick={() => setIsCreateModalOpen(true)}
            className="bg-[#F7B32B] text-black hover:bg-[#F7B32B]/90"
          >
            <Plus className="mr-2 h-4 w-4" />
            Add Parent
          </Button>
        </div>
      ) : (
        /* Table of parents */
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Phone</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredParents.map((parent) => (
              <TableRow key={parent._id}>
                <TableCell>{parent.userId?.name}</TableCell>
                <TableCell>{parent.userId?.email}</TableCell>
                <TableCell>{parent.userId?.phoneNumber?.[0]}</TableCell>
                <TableCell>
                  <StatusBadge status={parent.status || "inactive"} />
                </TableCell>
                <TableCell className="space-x-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setSelectedParent(parent);
                      setIsDetailsOpen(true);
                    }}
                  >
                    <Eye className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setSelectedParent(parent);
                      setIsEditOpen(true);
                    }}
                  >
                    <Edit2 className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-red-500"
                    onClick={() =>
                      handleStatusUpdate(
                        parent._id,
                        parent.status === "active" ? "suspended" : "active"
                      )
                    }
                  >
                    {parent.status === "active" ? "Suspend" : "Activate"}
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}

      {/* Details Dialog */}
      {selectedParent && (
        <ParentDetailsDialog parent={selectedParent} />
      )}

      {/* Edit Dialog */}
      <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Parent</DialogTitle>
          </DialogHeader>
          <ParentForm
            onSubmit={async (formData) => {
              try {
                await updateParent({
                  parentId: selectedParent?._id || "",
                  updateData: {
                    userId: {
                      name: formData.get("name") as string,
                      email: formData.get("email") as string,
                      phoneNumber: [formData.get("phoneNumber") as string],
                    },
                    address: formData.get("address") as string,
                  },
                });
                setIsEditOpen(false);
                toast.success("Parent updated successfully");
                fetchParents();
              } catch (error: unknown) {
                if (error instanceof Error)
                  toast.error(error.message || "Failed to update parent");
              }
            }}
            initialData={selectedParent}
          />
        </DialogContent>
      </Dialog>
    </div>
  );
}