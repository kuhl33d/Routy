import { useState, useEffect, useMemo } from "react";
import { Plus, Edit2, Search, Eye } from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

import { Badge } from "@/components/ui/badge";
import { useAdminStore } from "@/stores/admin.store";
import { toast } from "react-hot-toast";
import { School } from "@/types/admin.types";
import LoadingSpinner from "@/components/LoadingSpinner";

function SchoolsTab() {
  // State management
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [selectedSchool, setSelectedSchool] = useState<School | null>(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [isEditOpen, setIsEditOpen] = useState(false);

  // Get store actions and state
  const { schools, loading, error, getAllSchools, updateSchool } =
    useAdminStore();

  // Default values helper
  const getDefaultSchoolValues = (school: Partial<School>) => ({
    status: school.status || "inactive",
    city: school.city || "Not specified",
    state: school.state || "Not specified",
    country: school.country || "Not specified",
  });

  // Fetch schools on mount and when pagination changes
  useEffect(() => {
    fetchSchools();
    // eslint-disable-next-line
  }, [page, limit]);
  const fetchSchools = async () => {
    try {
      await getAllSchools();
    } catch (error: unknown) {
      if (error instanceof Error)
        toast.error(error.message || "Failed to fetch schools");
    }
  };
  // Filter schools based on search term
  const filteredSchools = useMemo(() => {
    if (!Array.isArray(schools)) {
      console.warn("Schools is not an array:", schools);
      return [];
    }
    return schools.filter(
      (school) =>
        school.userId?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        school.userId?.email
          ?.toLowerCase()
          .includes(searchTerm.toLowerCase()) ||
        (school.city || "").toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [schools, searchTerm]);

  // Status update handler
  const handleStatusUpdate = async (
    schoolId: string,
    newStatus: "active" | "inactive" | "suspended"
  ) => {
    try {
      await updateSchool({
        schoolId,
        updateData: { status: newStatus },
      });
      toast.success(
        `School ${
          newStatus === "active" ? "activated" : "suspended"
        } successfully`
      );
      fetchSchools();
    } catch (error: unknown) {
      if (error instanceof Error)
        toast.error(error.message || `Failed to update school status`);
    }
  };

  // Create school handler
  const handleCreateSchool = async (formData: FormData) => {
    try {
      const schoolData: Partial<School> = {
        userId: {
          _id: "", // This will be generated by the backend
          name: formData.get("name") as string,
          email: formData.get("email") as string,
          addresses: [], // Initialize empty addresses array
        },
        city: formData.get("city") as string,
        state: formData.get("state") as string,
        country: formData.get("country") as string,
        status: "inactive" as const,
      };

      await updateSchool({
        schoolId: "", // New school, no ID yet
        updateData: schoolData,
      });
      setIsCreateModalOpen(false);
      toast.success("School created successfully");
      fetchSchools();
    } catch (error: unknown) {
      if (error instanceof Error)
        toast.error(error.message || "Failed to create school");
    }
  };

  // School Form Component
  const SchoolForm = ({
    onSubmit,
    initialData,
  }: {
    onSubmit: (formData: FormData) => Promise<void>;
    initialData?: School | null;
  }) => {
    return (
      <form
        onSubmit={(e) => {
          e.preventDefault();
          onSubmit(new FormData(e.currentTarget));
        }}
        className="space-y-4"
      >
        <div className="space-y-2">
          <label className="text-sm font-medium">School Name</label>
          <Input
            name="name"
            defaultValue={initialData?.userId?.name}
            required
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Admin Email</label>
          <Input
            name="email"
            type="email"
            defaultValue={initialData?.userId?.email}
            required
          />
        </div>
        {/* <div className="space-y-2">
                  <label className="text-sm font-medium">Phone Number</label>
                  <Input 
                      name="phoneNumber" 
                      type="tel"
                      defaultValue={initialData?.userId?.phoneNumber?.[0]}
                  />
              </div> */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">City</label>
            <Input name="city" defaultValue={initialData?.city} />
          </div>
          <div className="space-y-2">
            <label className="text-sm font-medium">State</label>
            <Input name="state" defaultValue={initialData?.state} />
          </div>
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium">Country</label>
          <Input name="country" defaultValue={initialData?.country} />
        </div>
        <Button type="submit" className="w-full">
          {initialData ? "Update School" : "Create School"}
        </Button>
      </form>
    );
  };

  // Status Badge Component
  const StatusBadge = ({ status }: { status: string }) => (
    <Badge
      className={
        status === "active"
          ? "bg-green-100 text-green-800"
          : status === "suspended"
          ? "bg-red-100 text-red-800"
          : "bg-gray-100 text-gray-800"
      }
    >
      {status}
    </Badge>
  );

  // School Details Dialog
  const SchoolDetailsDialog = ({ school }: { school: School }) => {
    const defaults = getDefaultSchoolValues(school);

    return (
      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{school.userId?.name || "School Details"}</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <h3 className="font-medium">Location</h3>
              <p>{school.city || defaults.city}</p>
              <p>{school.state || defaults.state}</p>
              <p>{school.country || defaults.country}</p>
            </div>
            <div>
              <h3 className="font-medium">Contact</h3>
              <p>Email: {school.userId?.email}</p>
              {/* <p>Phone: {school.userId?.phoneNumber?.[0] || 'Not provided'}</p> */}
            </div>
            <div>
              <h3 className="font-medium">Status</h3>
              <StatusBadge status={school.status || defaults.status} />
            </div>
            <div>
              <h3 className="font-medium">Buses</h3>
              <p>{school.buses?.length || 0} buses registered</p>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    );
  };

  if (error) {
    return (
      <div className="p-4 bg-red-50 border border-red-200 rounded-md">
        <p className="text-red-600">{error}</p>
        <Button
          onClick={fetchSchools}
          className="mt-4 bg-red-600 hover:bg-red-700 text-white"
        >
          Retry
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Schools</h2>
        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
          <DialogTrigger asChild>
            <Button className="bg-[#F7B32B] text-black hover:bg-[#F7B32B]/90">
              <Plus className="mr-2 h-4 w-4" />
              Add School
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add New School</DialogTitle>
            </DialogHeader>
            <SchoolForm onSubmit={handleCreateSchool} />
          </DialogContent>
        </Dialog>
      </div>

      {/* Search and Filters */}
      <div className="flex items-center justify-between gap-4">
        <div className="flex-1 max-w-md">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search schools..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 bg-background"
            />
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-sm text-gray-500">Show</span>
          <select
            value={limit}
            onChange={(e) => {
              setLimit(Number(e.target.value));
              setPage(1);
            }}
            className="border rounded p-1 text-sm bg-background"
          >
            {[10, 20, 50, 100].map((value) => (
              <option key={value} value={value}>
                {value}
              </option>
            ))}
          </select>
          <span className="text-sm text-gray-500">entries</span>
        </div>
      </div>

      {/* Schools Table */}
      {loading ? (
        <LoadingSpinner />
      ) : filteredSchools.length === 0 ? (
        <div className="text-center py-8 text-gray-500">No schools found</div>
      ) : (
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>School Name</TableHead>
                <TableHead>Admin Email</TableHead>
                <TableHead>Location</TableHead>
                <TableHead>Buses</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredSchools.map((school) => {
                const defaults = getDefaultSchoolValues(school);

                return (
                  <TableRow key={school._id}>
                    <TableCell className="font-medium">
                      {school.userId?.name || "Unnamed School"}
                    </TableCell>
                    <TableCell>
                      {school.userId?.email || "No email provided"}
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-col">
                        <span>{school.city || defaults.city}</span>
                        <span className="text-sm text-gray-500">
                          {school.state || defaults.state}
                        </span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline">
                        {school.buses?.length || 0} buses
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <StatusBadge status={school.status || defaults.status} />
                    </TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setSelectedSchool(school);
                            setIsDetailsOpen(true);
                          }}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            setSelectedSchool(school);
                            setIsEditOpen(true);
                          }}
                        >
                          <Edit2 className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() =>
                            handleStatusUpdate(
                              school._id,
                              school.status === "active"
                                ? "suspended"
                                : "active"
                            )
                          }
                        >
                          {school.status === "active" ? "Suspend" : "Activate"}
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </div>
      )}

      {/* Pagination */}
      {filteredSchools.length > 0 && (
        <div className="flex items-center justify-between py-4">
          <div className="text-sm text-gray-500">
            Showing {(page - 1) * limit + 1} to{" "}
            {Math.min(page * limit, filteredSchools.length)} of{" "}
            {filteredSchools.length} entries
          </div>
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage(1)}
              disabled={page === 1}
            >
              First
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage((p) => Math.max(1, p - 1))}
              disabled={page === 1}
            >
              Previous
            </Button>
            <span className="text-sm text-gray-500">
              Page {page} of {Math.ceil(filteredSchools.length / limit)}
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage((p) => p + 1)}
              disabled={page >= Math.ceil(filteredSchools.length / limit)}
            >
              Next
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setPage(Math.ceil(filteredSchools.length / limit))}
              disabled={page >= Math.ceil(filteredSchools.length / limit)}
            >
              Last
            </Button>
          </div>
        </div>
      )}

      {/* Modals */}
      {selectedSchool && (
        <>
          <SchoolDetailsDialog school={selectedSchool} />

          <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Edit School</DialogTitle>
              </DialogHeader>
              <SchoolForm
                initialData={selectedSchool}
                onSubmit={async (formData) => {
                  try {
                    await updateSchool({
                      schoolId: selectedSchool._id,
                      updateData: {
                        userId: {
                          _id: selectedSchool.userId._id, // Keep the existing _id
                          name: formData.get("name") as string,
                          email: formData.get("email") as string,
                          addresses: selectedSchool.userId.addresses, // Keep existing addresses
                        },
                        city: formData.get("city") as string,
                        state: formData.get("state") as string,
                        country: formData.get("country") as string,
                      },
                    });
                    setIsEditOpen(false);
                    toast.success("School updated successfully");
                    fetchSchools();
                  } catch (error: unknown) {
                    if (error instanceof Error)
                      toast.error(error.message || "Failed to update school");
                  }
                }}
              />
            </DialogContent>
          </Dialog>
        </>
      )}
    </div>
  );
}

export default SchoolsTab;
